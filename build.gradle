plugins {
    id 'java'
}

group = 'fr.funpvp.sdk'
version = '1.0-dev'

repositories {
    mavenCentral()

    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "velocitypowered"
        url = "https://repo.velocitypowered.com/snapshots/"
    }
    maven { url = "https://repo.imanity.dev/imanity-libraries" }
    maven { url = "https://repo.codemc.io/repository/maven-releases/" }
}

dependencies {
    compileOnly "com.github.retrooper:packetevents-spigot:2.8.0"
    implementation "org.java-websocket:Java-WebSocket:1.6.0"

    implementation 'io.lettuce:lettuce-core:5.3.6.RELEASE'
    implementation 'org.apache.commons:commons-pool2:2.11.1'

    implementation "org.mongodb:mongodb-driver-sync:4.11.1"

    implementation "com.github.docker-java:docker-java-core:3.3.4"
    implementation "com.github.docker-java:docker-java-transport-httpclient5:3.3.4"

    implementation "org.apache.httpcomponents.client5:httpclient5:5.2.1"
    implementation "org.apache.httpcomponents.core5:httpcore5:5.2.2"

    implementation "commons-io:commons-io:2.15.1"
    implementation "com.google.code.gson:gson:2.10.1"

    compileOnly "org.projectlombok:lombok:1.18.24"
    annotationProcessor "org.projectlombok:lombok:1.18.34"
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def buildId = UUID.randomUUID().toString().replaceAll('-', '').substring(0, 7) + '-' + UUID.randomUUID().toString().replaceAll('-', '').substring(0, 4)
    def props = [version: buildId]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
